// This example shows how to use test grouping in combination with test stealing.

//// SNIPPET:BUILD1
package build
import mill._, scalalib._

object foo extends ScalaModule {
  def scalaVersion = "2.13.8"
  object test extends ScalaTests {
    def ivyDeps = Seq(ivy"com.lihaoyi::utest:0.8.5")
    def testFramework = "utest.runner.Framework"
    
    def testForkGrouping = discoveredTestClasses().grouped(10).toSeq
    def testEnableWorkStealing = true
  }
}


//// SNIPPET:END

/** Usage

> mill -j 4 foo.test # Can be flaky, but the test time will be big enough for cluster do decide to spawn all test runners

> find out/foo/test/testForked.dest
...
out/foo/test/testForked.dest/group-0-foo.GroupX1/0.log
out/foo/test/testForked.dest/group-0-foo.GroupX1/0
out/foo/test/testForked.dest/group-0-foo.GroupX1/1.log
out/foo/test/testForked.dest/group-0-foo.GroupX1/1
out/foo/test/testForked.dest/group-0-foo.GroupX1/selectors
out/foo/test/testForked.dest/group-1-foo.GroupY1/0.log
out/foo/test/testForked.dest/group-1-foo.GroupY1/0
out/foo/test/testForked.dest/group-1-foo.GroupY1/1.log
out/foo/test/testForked.dest/group-1-foo.GroupY1/1
out/foo/test/testForked.dest/group-1-foo.GroupY1/selectors
out/foo/test/testForked.dest/test-report.xml
...

*/
