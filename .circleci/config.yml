version: 2.1

jobs:
  test-windows:
    parameters:
      java-version:
        type: string
      millargs:
        type: string
      do_checkout:
        type: boolean
        default: false
    resource_class: windows.medium
    machine:
      image: windows-server-2019-vs2019:2022.08.1


    steps:
      - when:
          condition: << parameters.do_checkout >>
          steps:
            - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Mill Command"
          # somehow ivy resolution causes nondeterministic concurrency failures on windows,
          # so make sure we do it all up from before starting
          command: "./mill -j1 __.resolvedIvyDeps && ./mill -ik << parameters.millargs >>"
          shell: bash.exe
      - persist_to_workspace:
          root: .
          paths: '*'

  test:
    parameters:
      java-version:
        type: string
      millargs:
        type: string
      do_checkout:
        type: boolean
        default: false
    machine:
      image: ubuntu-2004:current
#    docker:
#      - image: cimg/base:current
    resource_class: large

    steps:
    - when:
        condition: << parameters.do_checkout >>
        steps:
        - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        key: scala-library-dependencies-{{ checksum "build.mill" }}
    - run:
        name: "Install OpenJDK"
        command: |
          sudo apt-get update && sudo apt-get install openjdk-<< parameters.java-version >>-jdk
          sudo apt-get install clang
          sudo update-alternatives --set java /usr/lib/jvm/java-<< parameters.java-version >>-openjdk-amd64/bin/java
          sudo update-alternatives --set javac /usr/lib/jvm/java-<< parameters.java-version >>-openjdk-amd64/bin/javac
          java -version
    - run:
        name: "Mill Command"
        command: "./mill -ik << parameters.millargs >>"
    - save_cache:
        paths: [ "~/.m2", "~/.ivy2", "~/.cache/coursier" ]
        key: scala-library-dependencies-{{ checksum "build.mill" }}
    - persist_to_workspace:
        root: .
        paths: '*'
workflows:
  all-tests:
    jobs:
    - test:
        name: build
        java-version: "11"
        millargs: '"__.compile"'
        do_checkout: true
    - test:
        name: main-etc-java11
        java-version: "11"
        millargs: '"{main,scalalib,testrunner,testkit,bsp}.__.test"'
        requires: [build]
    - test:
        name: main-etc-java17
        java-version: "17"
        millargs: '"{main,scalalib,testrunner,testkit,bsp}.__.test"'
        requires: [build]

      # For most tests, run them arbitrarily on Java 8 or Java 17 on Linux, and
      # on the opposite version on Windows below, so we get decent coverage of
      # each test on each Java version and each operating system
    - test:
        name: scalajslib-scalanativelib
        java-version: "11"
        millargs: '"{scalajslib,scalanativelib}.__.testCached"'
        requires: [build]
    - test:
        name: contrib
        java-version: "17"
        millargs: "contrib.__.testCached"
        requires: [build]

      # Group these tests together to try and balance out the runtimes of each job
      # Just running in `local` mode since they shouldn't depend on the mode
    - test:
        name: example-javalib-scalalib
        java-version: "17"
        millargs: "'example.{javalib,scalalib}.__.local.testCached'"
        requires: [build]
    - test:
        name: example-depth-extending
        java-version: "11"
        millargs: "'example.{depth,extending}.__.local.testCached'"
        requires: [build]
    - test:
        name: example-thirdparty-java11
        java-version: "11"
        millargs: "'example.thirdparty[{mockito,acyclic,commons-io}].local.testCached'"
        requires: [build]
    - test:
        name: example-thirdparty-java17
        java-version: "17"
        millargs: "'example.thirdparty[{fansi,jimfs,netty,gatling}].local.testCached'"
        requires: [build]

      # Most of these integration tests should not depend on which mode they
      # are run in, so just run them in `local`
    - test:
        name: integration
        java-version: "11"
        millargs: "'integration.{failure,feature,ide}[_].local.testCached'"
        requires: [build]

      # These invalidation tests need to be exercised in all three execution modes
      # to make sure they work with and without -i/--no-server being passed
    - test:
        name: integration-invalidation-local
        java-version: "17"
        millargs: "'integration.invalidation[_].local.testCached'"
        requires: [build]
    - test:
        name: integration-invalidation-fork
        java-version: "17"
        millargs: "'integration.invalidation[_].fork.testCached'"
        requires: [build]
    - test:
        name: integration-invalidation-server
        java-version: "17"
        millargs: "'integration.invalidation[_].server.testCached'"
        requires: [build]

      # Check docsite compiles
    - test:
        name: docs
        java-version: "17"
        millargs: docs.githubPages
        do_checkout: true


      # just run a subset of examples/ on Windows, because for some reason running
      # the whole suite can take hours on windows v.s. half an hour on linux
    - test-windows:
        name: windows-build
        java-version: "11"
        millargs: '"__.compile"'
        do_checkout: true
    - test-windows:
        name: windows-main-etc
        java-version: "11"
        millargs: '"{main,scalalib,bsp}.__.testCached"'
        requires: [windows-build]
    - test-windows:
        name: windows-example-scalalib-basic
        java-version: "11"
        millargs: '"example.scalalib.basic.__.fork.testCached"'
        requires: [windows-build]
    - test-windows:
        name: windows-integration-feature
        java-version: "17"
        millargs: "'integration.feature[_].fork.testCached'"
        requires: [windows-build]
    - test-windows:
        name: windows-integration-invalidation
        java-version: "11"
        millargs: "'integration.invalidation[_].server.testCached'"
        requires: [windows-build]
    - test-windows:
        name: windows-integration-failure
        java-version: "17"
        millargs: "'integration.failure[_].fork.testCached'"
        requires: [windows-build]
